#!/usr/bin/python3
import binascii
import sys
import os

from crc import Calculator, Configuration

crcConfig = Configuration(
    width=32,
    polynomial=0x4C11DB7,
    init_value=0x00,
    final_xor_value=0x00,
    reverse_input=False,
    reverse_output=False
)

# stringToInt taken from text_to_bits from here:
# https://stackoverflow.com/questions/7396849/convert-binary-to-ascii-and-vice-versa
def stringToInt(string, encoding="utf-8", errors="surrogatepass"):
    bits = bin(int(binascii.hexlify(string.encode(encoding, errors)), 16))[2:]
    return int(bits.zfill(8 * ((len(bits) + 7) // 8)), 2)

# Make sure something was passed in
if len(sys.argv) < 2:
    input("You must pass in a proper True Crime: Streets of LA gci file. Press Enter to close this window.")
    sys.exit("")

# Make sure what was passed in is a gci file
FileName = sys.argv[1]
if not FileName.endswith(".gci"):
    input("You must pass in a proper True Crime: Streets of LA gci file. Press Enter to close this window.")
    sys.exit("")

# Open the gci file
f = open(FileName, "r+b")

# Get the game id
GameId = int.from_bytes(f.read(6), byteorder="big", signed=False)

# Set up the values for the three retail game ids
ID_US = stringToInt("GTLE52")
ID_EU_0 = stringToInt("GTLP52")
ID_EU_1 = stringToInt("GTLX52")

# Make sure the game id of the gci file opened is valid
if (GameId != ID_US) and (GameId != ID_EU_0) and (GameId != ID_EU_1):
    f.close()
    input("You must pass in a proper True Crime: Streets of LA gci file. Press Enter to close this window.")
    sys.exit("")

# Get the internal filename
f.seek(0x8, 0)
InternalName = int.from_bytes(f.read(24), byteorder="big", signed=False)

# Make sure the internal filename of the gci file opened is valid
ProperInternalName = stringToInt("TRUE CRIME STREETS OF LA")

if InternalName != ProperInternalName:
    f.close()
    input("You must pass in a proper True Crime: Streets of LA gci file. Press Enter to close this window.")
    sys.exit("")

# The bin files cannot exceed 0x8BC bytes, so make sure the one that will be used has a proper size
VersionText = ""
if GameId == ID_US:
    VersionText = "US"
elif GameId == ID_EU_0:
    VersionText = "EU0"
else:
    VersionText = "EU1"

BinFilePath = "bin/Main_" + VersionText + ".bin"
if os.stat(BinFilePath).st_size > 0x8BC:
    f.close()
    input("Error: The bin file to be used with this gci file is too large. Press Enter to close this window.")
    sys.exit("")

# Write the new description for the gci
GameIdString = ""
if GameId == ID_US:
    GameIdString = "GTLE"
elif GameId == ID_EU_0:
    GameIdString = "GTLP"
else:
    GameIdString = "GTLX"

GameDescriptionString = "Save Exploit (" + GameIdString + ")\0"
f.seek(0x60, 0)
f.write(stringToInt(GameDescriptionString).to_bytes(len(GameDescriptionString), byteorder="big", signed=False))

# Clear all of the bytes for the first file to be safe
f.seek(0x2040, 0)
for i in range(0, 0x8C0):
    f.write((0).to_bytes(1, byteorder="big", signed=False))

# Write the filler bytes for the first file
f.seek(0x2040, 0)
for i in range(0, 0x210):
    f.write((0x33).to_bytes(1, byteorder="big", signed=False))

# Write the pointer to the pointer to the second file
StackPtr = 0
if GameId == ID_US:
    StackPtr = 0x80517B44
elif GameId == ID_EU_0:
    StackPtr = 0x80517484
else:
    StackPtr = 0x804F89A4

f.seek(0x2220, 0)
f.write((StackPtr - 0x8).to_bytes(4, byteorder="big", signed=False))

# Write the pointer to the second file
SecondFilePtr = 0
if GameId == ID_US:
    SecondFilePtr = 0x804C85DC
elif GameId == ID_EU_0:
    SecondFilePtr = 0x804C7F1C
else:
    SecondFilePtr = 0x804A943C

f.seek(0x2224, 0)
f.write(SecondFilePtr.to_bytes(4, byteorder="big", signed=False))

# Write the address that will overwrite the saved LR on the stack
SaveLRAddress = 0
if (GameId == ID_US) or (GameId == ID_EU_0):
    SaveLRAddress = 0x80013848
else:
    SaveLRAddress = 0x80013884

f.seek(0x224C, 0)
f.write(SaveLRAddress.to_bytes(4, byteorder="big", signed=False))

# Clear all of the bytes for the second file to be safe
f.seek(0x4040, 0)
for i in range(0, 0x8C0):
    f.write((0).to_bytes(1, byteorder="big", signed=False))

# Open the file containing the asm function
g = open(BinFilePath, "rb")

# Perform the write
Func = g.read()

f.seek(0x4040, 0)
for b in Func:
    f.write(b.to_bytes(1, byteorder="big", signed=False))
g.close()

# Rewrite the checksums for the description/banner/icon data and the two modified files
calculator = Calculator(crcConfig)

# Description/banner/icon data
# The previous checksum needs to be cleared before the new one can be calculated
f.seek(0x1708, 0)
f.write((0).to_bytes(4, byteorder="big", signed=False))

# Calculate and write the checksum
f.seek(0x40, 0)
DataField = f.read(0x16CC)

f.seek(0x1708, 0)
f.write((calculator.checksum(DataField)).to_bytes(4, byteorder="big", signed=False))

# First file
# Calculate and write the checksum
f.seek(0x2040, 0)
DataField = f.read(0x8C0)

f.seek(0x28FC, 0)
f.write((calculator.checksum(DataField)).to_bytes(4, byteorder="big", signed=False))

# Second file
# Calculate and write the checksum
f.seek(0x4040, 0)
DataField = f.read(0x8C0)

f.seek(0x48FC, 0)
f.write((calculator.checksum(DataField)).to_bytes(4, byteorder="big", signed=False))

f.close()
